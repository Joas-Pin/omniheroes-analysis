[1,0,0,[["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4]],[[0,"sprite-hsv",[{"hash":692305359,"record":null,"name":"sprite-hsv|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvec3 RGBConvertToHSV(vec3 rgb) {\n  float R = rgb.x, G = rgb.y, B = rgb.z;\n  vec3 hsv;\n  float max1 = max(R,max(G,B));\n  float min1 = min(R,min(G,B));\n  if (R == max1) {\n    hsv.x = (G-B)/(max1-min1);\n  }\n  if (G == max1) {\n    hsv.x = 2.0 + (B-R)/(max1-min1);\n  }\n  if (B == max1) {\n    hsv.x = 4.0 + (R-G)/(max1-min1);\n  }\n  hsv.x = hsv.x * 60.0;\n  if (hsv.x < 0.0) hsv.x = hsv.x + 360.0;\n  hsv.z = max1;\n  hsv.y = (max1 - min1) / max1;\n  return hsv;\n}\nvec3 HSVConvertToRGB(vec3 hsv) {\n  float R,G,B;\n  if( hsv.y == 0.0 ) {\n    R=G=B=hsv.z;\n  }\n  else {\n    hsv.x = hsv.x/60.0;\n    int i = int(hsv.x);\n    float f = hsv.x - float(i);\n    float a = hsv.z * ( 1.0 - hsv.y );\n    float b = hsv.z * ( 1.0 - hsv.y * f );\n    float c = hsv.z * ( 1.0 - hsv.y * (1.0 - f ) );\n    if(i == 0) {\n      R = hsv.z; G = c; B = a;\n    }\n    else if(i == 1) {\n      R = b; G = hsv.z; B = a;\n    }\n    else if(i == 2) {\n      R = a; G = hsv.z; B = c;\n    }\n    else if(i == 3) {\n      R = a; G = b; B = hsv.z;\n    }\n    else if(i == 4) {\n      R = c; G = a; B = hsv.z;\n    }\n    else {\n      R = hsv.z; G = a; B = b;\n    }\n  }\n  return vec3(R,G,B);\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  vec3 colorHSV = RGBConvertToHSV(o.xyz);\n  colorHSV.x += v_color.x*360.0;\n  colorHSV.x = mod(colorHSV.x, 360.0);\n  colorHSV.y *= v_color.y*3.0;\n  colorHSV.z *= v_color.z*3.0;\n  o.xyz = HSVConvertToRGB(colorHSV.xyz);\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvec3 RGBConvertToHSV(vec3 rgb) {\n  float R = rgb.x, G = rgb.y, B = rgb.z;\n  vec3 hsv;\n  float max1 = max(R,max(G,B));\n  float min1 = min(R,min(G,B));\n  if (R == max1) {\n    hsv.x = (G-B)/(max1-min1);\n  }\n  if (G == max1) {\n    hsv.x = 2.0 + (B-R)/(max1-min1);\n  }\n  if (B == max1) {\n    hsv.x = 4.0 + (R-G)/(max1-min1);\n  }\n  hsv.x = hsv.x * 60.0;\n  if (hsv.x < 0.0) hsv.x = hsv.x + 360.0;\n  hsv.z = max1;\n  hsv.y = (max1 - min1) / max1;\n  return hsv;\n}\nvec3 HSVConvertToRGB(vec3 hsv) {\n  float R,G,B;\n  if( hsv.y == 0.0 ) {\n    R=G=B=hsv.z;\n  }\n  else {\n    hsv.x = hsv.x/60.0;\n    int i = int(hsv.x);\n    float f = hsv.x - float(i);\n    float a = hsv.z * ( 1.0 - hsv.y );\n    float b = hsv.z * ( 1.0 - hsv.y * f );\n    float c = hsv.z * ( 1.0 - hsv.y * (1.0 - f ) );\n    if(i == 0) {\n      R = hsv.z; G = c; B = a;\n    }\n    else if(i == 1) {\n      R = b; G = hsv.z; B = a;\n    }\n    else if(i == 2) {\n      R = a; G = hsv.z; B = c;\n    }\n    else if(i == 3) {\n      R = a; G = b; B = hsv.z;\n    }\n    else if(i == 4) {\n      R = c; G = a; B = hsv.z;\n    }\n    else {\n      R = hsv.z; G = a; B = b;\n    }\n  }\n  return vec3(R,G,B);\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  vec3 colorHSV = RGBConvertToHSV(o.xyz);\n  colorHSV.x += v_color.x*360.0;\n  colorHSV.x = mod(colorHSV.x, 360.0);\n  colorHSV.y *= v_color.y*3.0;\n  colorHSV.z *= v_color.z*3.0;\n  o.xyz = HSVConvertToRGB(colorHSV.xyz);\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"sprite-hsv|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]]