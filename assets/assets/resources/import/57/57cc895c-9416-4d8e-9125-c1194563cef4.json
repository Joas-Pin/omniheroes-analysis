[1,0,0,[["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4]],[[0,"simple-page-dissolve",[{"hash":4247086227,"record":null,"name":"simple-page-dissolve|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\n#if USE_TINT\n  in vec4 a_color0;\n#endif\nin vec2 a_uv0;\nout vec2 v_uv0;\nout vec4 v_light;\n#if USE_TINT\n  out vec4 v_dark;\n#endif\nvoid main () {\n  mat4 mvp;\n  #if CC_USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n  v_uv0 = a_uv0;\n  v_light = a_color;\n  #if USE_TINT\n    v_dark = a_color0;\n  #endif\n  gl_Position = mvp * vec4(a_position, 1);\n}","frag":"\nprecision highp float;\nuniform sampler2D texture;\nin vec2 v_uv0;\nin vec4 v_light;\n#if USE_TINT\n  in vec4 v_dark;\n#endif\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\n  uniform Constant {\n    float time;\n    float offset;\n    float centerX;\n    float centerY;\n    float scaleX;\n    float scaleY;\n    float distance;\n  };\nfloat r(in vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\nfloat n(in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    float a = r(i);\n    float b = r(i + vec2(1.0, 0.0));\n    float c = r(i + vec2(0.0, 1.0));\n    float d = r(i + vec2(1.0, 1.0));\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\nfloat f(in vec2 st) {\n    float value = 0.0;\n    float amp = .5;\n    value += amp * n(st);\n    st *= 2.0;\n    amp *= 0.5;\n    value += amp * n(st);\n    st *= 2.0;\n    amp *= 0.5;\n    value += amp * n(st);\n    st *= 2.0;\n    amp *= 0.5;\n    value += amp * n(st);\n    st *= 2.0;\n    amp *= 0.5;\n    value += amp * n(st);\n    st *= 2.0;\n    amp *= 0.5;\n    return value;\n}\nvoid main () {\n  vec4 texColor = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_TEXTURE\n      texColor.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  vec4 finalColor;\n  #if USE_TINT\n    finalColor.a = v_light.a * texColor.a;\n    finalColor.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;\n  #else\n    finalColor = texColor * v_light;\n  #endif\n    float x = (v_uv0.x - centerX) / scaleX;\n    float y = (v_uv0.y - centerY) / scaleY;\n    float d = (x * x + y * y) / distance;\n    float t = time - d + offset;\n    float a = clamp(1.0 + f(vec2(v_uv0.x, v_uv0.y) * 10.0) - t, 0.0, 1.0);\n    float tv = step(0.9, a);\n    float ea = 1.0 - tv;\n    finalColor.rgb = (finalColor.rgb * tv);\n    if(finalColor.r < 0.001  || finalColor.g < 0.001 || finalColor.b < 0.001){\n      discard;\n    }\n    gl_FragColor = finalColor;\n }"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\n#if USE_TINT\n  attribute vec4 a_color0;\n#endif\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvarying vec4 v_light;\n#if USE_TINT\n  varying vec4 v_dark;\n#endif\nvoid main () {\n  mat4 mvp;\n  #if CC_USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n  v_uv0 = a_uv0;\n  v_light = a_color;\n  #if USE_TINT\n    v_dark = a_color0;\n  #endif\n  gl_Position = mvp * vec4(a_position, 1);\n}","frag":"\nprecision highp float;\nuniform sampler2D texture;\nvarying vec2 v_uv0;\nvarying vec4 v_light;\n#if USE_TINT\n  varying vec4 v_dark;\n#endif\n#if USE_ALPHA_TEST\n#endif\n  uniform float time;\nuniform float offset;\nuniform float centerX;\nuniform float centerY;\nuniform float scaleX;\nuniform float scaleY;\nuniform float distance;\nfloat r(in vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\nfloat n(in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    float a = r(i);\n    float b = r(i + vec2(1.0, 0.0));\n    float c = r(i + vec2(0.0, 1.0));\n    float d = r(i + vec2(1.0, 1.0));\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\nfloat f(in vec2 st) {\n    float value = 0.0;\n    float amp = .5;\n    value += amp * n(st);\n    st *= 2.0;\n    amp *= 0.5;\n    value += amp * n(st);\n    st *= 2.0;\n    amp *= 0.5;\n    value += amp * n(st);\n    st *= 2.0;\n    amp *= 0.5;\n    value += amp * n(st);\n    st *= 2.0;\n    amp *= 0.5;\n    value += amp * n(st);\n    st *= 2.0;\n    amp *= 0.5;\n    return value;\n}\nvoid main () {\n  vec4 texColor = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_TEXTURE\n      texColor.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  vec4 finalColor;\n  #if USE_TINT\n    finalColor.a = v_light.a * texColor.a;\n    finalColor.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;\n  #else\n    finalColor = texColor * v_light;\n  #endif\n    float x = (v_uv0.x - centerX) / scaleX;\n    float y = (v_uv0.y - centerY) / scaleY;\n    float d = (x * x + y * y) / distance;\n    float t = time - d + offset;\n    float a = clamp(1.0 + f(vec2(v_uv0.x, v_uv0.y) * 10.0) - t, 0.0, 1.0);\n    float tv = step(0.9, a);\n    float ea = 1.0 - tv;\n    finalColor.rgb = (finalColor.rgb * tv);\n    if(finalColor.r < 0.001  || finalColor.g < 0.001 || finalColor.b < 0.001){\n      discard;\n    }\n    gl_FragColor = finalColor;\n }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TINT","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_TEXTURE","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","binding":1,"members":[{"name":"time","type":13,"count":1},{"name":"offset","type":13,"count":1},{"name":"centerX","type":13,"count":1},{"name":"centerY","type":13,"count":1},{"name":"scaleX","type":13,"count":1},{"name":"scaleY","type":13,"count":1},{"name":"distance","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]}]}],[{"passes":[{"program":"simple-page-dissolve|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"time":{"type":13,"value":[0.5]},"offset":{"type":13,"value":[0.3]},"centerX":{"type":13,"value":[0.5]},"centerY":{"type":13,"value":[0.4]},"scaleX":{"type":13,"value":[1]},"scaleY":{"type":13,"value":[0.4]},"distance":{"type":13,"value":[0.7]}}}]}]]],0,0,[],[],[]]