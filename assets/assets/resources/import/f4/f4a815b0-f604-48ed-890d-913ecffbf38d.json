[1,0,0,[["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4]],[[0,"broken",[{"hash":2971811627,"record":null,"name":"broken|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n  uniform Constant {\n      float t;\n      float chaosSeed;\n      float diffY;\n      float samplerSeed;\n  };\n  float random (vec2 st) {\n      return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n  }\n  float sampleRed(vec2 coord) {\n      float ret = coord.y - coord.x;\n      return texture(texture, coord - t * chaosSeed * samplerSeed).r;\n  }\n  float sampleBlue(vec2 coord) {\n      float ret = coord.x - coord.y;\n      return texture(texture, coord + t * chaosSeed * samplerSeed).b;\n  }\n  void main(void)\n  {\n      float result = random(vec2(v_uv0.x + t) * 5000.0) - 0.5;\n      vec2 coord = vec2(v_uv0.x, v_uv0.y + result * diffY * chaosSeed);\n      vec4 oc = texture(texture, coord);\n      gl_FragColor = vec4(sampleRed(coord), oc.g, sampleBlue(coord), oc.a) * v_color;\n  }"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n  uniform float t;\nuniform float chaosSeed;\nuniform float diffY;\nuniform float samplerSeed;\n  float random (vec2 st) {\n      return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n  }\n  float sampleRed(vec2 coord) {\n      float ret = coord.y - coord.x;\n      return texture2D(texture, coord - t * chaosSeed * samplerSeed).r;\n  }\n  float sampleBlue(vec2 coord) {\n      float ret = coord.x - coord.y;\n      return texture2D(texture, coord + t * chaosSeed * samplerSeed).b;\n  }\n  void main(void)\n  {\n      float result = random(vec2(v_uv0.x + t) * 5000.0) - 0.5;\n      vec2 coord = vec2(v_uv0.x, v_uv0.y + result * diffY * chaosSeed);\n      vec4 oc = texture2D(texture, coord);\n      gl_FragColor = vec4(sampleRed(coord), oc.g, sampleBlue(coord), oc.a) * v_color;\n  }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","binding":1,"members":[{"name":"t","type":13,"count":1},{"name":"chaosSeed","type":13,"count":1},{"name":"diffY","type":13,"count":1},{"name":"samplerSeed","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"broken|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"t":{"type":13,"value":[0.5]},"chaosSeed":{"type":13,"value":[0.015]},"samplerSeed":{"type":13,"value":[0.5]},"diffY":{"type":13,"value":[0.04]}}}]}]]],0,0,[],[],[]]