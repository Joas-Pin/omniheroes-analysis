[1,0,0,[["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4]],[[0,"gray-photo-lerp",[{"hash":1682893424,"record":null,"name":"gray-photo-lerp|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\n#if USE_TINT\n  in vec4 a_color0;\n#endif\nin vec2 a_uv0;\nout vec2 v_uv0;\nout vec2 v_worldPos;\nout vec4 v_light;\n#if USE_TINT\n  out vec4 v_dark;\n#endif\nvoid main () {\n  mat4 mvp;\n  #if CC_USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n  v_uv0 = a_uv0;\n  v_light = a_color;\n  #if USE_TINT\n    v_dark = a_color0;\n  #endif\n  v_worldPos = (cc_matWorld * vec4(a_position.xyz, 1.0)).xy;\n  gl_Position = mvp * vec4(a_position, 1);\n}","frag":"\nprecision highp float;\nuniform Constant {\n    vec4 colorBottom;\n    vec4 colorTop;\n    float heightBottom;\n    float heightTop;\n    float oldLevel;\n    float grayLevel;\n    float brightness;\n};\nuniform sampler2D texture;\nin vec2 v_uv0;\nin vec4 v_light;\nin vec2 v_worldPos;\n#if USE_TINT\n  in vec4 v_dark;\n#endif\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvec3 getOldPhotoColor(vec3 color) {\n  float r = 0.393 * color.r + 0.769 * color.g + 0.189 * color.b;\n  float g = 0.349 * color.r + 0.686 * color.g + 0.168 * color.b;\n  float b = 0.272 * color.r + 0.534 * color.g + 0.131 * color.b;\n  return vec3(r, g, b);\n}\nvoid main () {\n    vec4 texColor = texture2D(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n        texColor.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n    vec4 finalColor;\n    #if USE_TINT\n        finalColor.a = v_light.a * texColor.a;\n        finalColor.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;\n    #else\n        finalColor = texColor * v_light;\n    #endif\n    ALPHA_TEST(finalColor);\n    float totalHeight = heightTop - heightBottom;\n    float height = v_worldPos.y - heightBottom;\n    float ratio = clamp(height / totalHeight, 0.0, 1.0);\n#if GRAY_COLOR\n    vec3 graySeed = vec3(0.2126, 0.7152, 0.0722);\n    finalColor.rgb = mix(finalColor.rgb, vec3(dot(graySeed, finalColor.rgb) + brightness), grayLevel);\n#endif\n    finalColor.rgb = mix(finalColor.rgb, getOldPhotoColor(finalColor.rgb).rgb, oldLevel);\n    vec3 colorMultiplier = mix(colorBottom.xyz, colorTop.xyz, clamp(ratio, 0.0, 1.0));\n    gl_FragColor = vec4(finalColor.rgb * colorMultiplier, finalColor.a);\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\n#if USE_TINT\n  attribute vec4 a_color0;\n#endif\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvarying vec2 v_worldPos;\nvarying vec4 v_light;\n#if USE_TINT\n  varying vec4 v_dark;\n#endif\nvoid main () {\n  mat4 mvp;\n  #if CC_USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n  v_uv0 = a_uv0;\n  v_light = a_color;\n  #if USE_TINT\n    v_dark = a_color0;\n  #endif\n  v_worldPos = (cc_matWorld * vec4(a_position.xyz, 1.0)).xy;\n  gl_Position = mvp * vec4(a_position, 1);\n}","frag":"\nprecision highp float;\nuniform vec4 colorBottom;\nuniform vec4 colorTop;\nuniform float heightBottom;\nuniform float heightTop;\nuniform float oldLevel;\nuniform float grayLevel;\nuniform float brightness;\nuniform sampler2D texture;\nvarying vec2 v_uv0;\nvarying vec4 v_light;\nvarying vec2 v_worldPos;\n#if USE_TINT\n  varying vec4 v_dark;\n#endif\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvec3 getOldPhotoColor(vec3 color) {\n  float r = 0.393 * color.r + 0.769 * color.g + 0.189 * color.b;\n  float g = 0.349 * color.r + 0.686 * color.g + 0.168 * color.b;\n  float b = 0.272 * color.r + 0.534 * color.g + 0.131 * color.b;\n  return vec3(r, g, b);\n}\nvoid main () {\n    vec4 texColor = texture2D(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n        texColor.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n    vec4 finalColor;\n    #if USE_TINT\n        finalColor.a = v_light.a * texColor.a;\n        finalColor.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;\n    #else\n        finalColor = texColor * v_light;\n    #endif\n    ALPHA_TEST(finalColor);\n    float totalHeight = heightTop - heightBottom;\n    float height = v_worldPos.y - heightBottom;\n    float ratio = clamp(height / totalHeight, 0.0, 1.0);\n#if GRAY_COLOR\n    vec3 graySeed = vec3(0.2126, 0.7152, 0.0722);\n    finalColor.rgb = mix(finalColor.rgb, vec3(dot(graySeed, finalColor.rgb) + brightness), grayLevel);\n#endif\n    finalColor.rgb = mix(finalColor.rgb, getOldPhotoColor(finalColor.rgb).rgb, oldLevel);\n    vec3 colorMultiplier = mix(colorBottom.xyz, colorTop.xyz, clamp(ratio, 0.0, 1.0));\n    gl_FragColor = vec4(finalColor.rgb * colorMultiplier, finalColor.a);\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TINT","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_TEXTURE","type":"boolean","defines":[]},{"name":"GRAY_COLOR","type":"boolean","defines":[]}],"blocks":[{"name":"Constant","binding":0,"members":[{"name":"colorBottom","type":16,"count":1},{"name":"colorTop","type":16,"count":1},{"name":"heightBottom","type":13,"count":1},{"name":"heightTop","type":13,"count":1},{"name":"oldLevel","type":13,"count":1},{"name":"grayLevel","type":13,"count":1},{"name":"brightness","type":13,"count":1}],"defines":[]},{"name":"ALPHA_TEST","binding":1,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]}]}],[{"passes":[{"program":"gray-photo-lerp|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"colorBottom":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"heightBottom":{"type":13,"value":[1]},"colorTop":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"heightTop":{"type":13,"value":[1000]},"oldLevel":{"type":13,"value":[0.6]},"grayLevel":{"type":13,"value":[0]},"brightness":{"type":13,"value":[0]},"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]]