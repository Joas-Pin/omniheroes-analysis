[1,0,0,[["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4]],[[0,"radial-blur",[{"hash":2699297706,"record":null,"name":"radial-blur|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n#endif\nuniform Constant {\n  float screenWidth;\n  float screenHeight;\n  float centerX;\n  float centerY;\n  float opacity;\n};\nconst int nsamples = 10;\nvoid main () {\n  vec4 texel = vec4(1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    texel.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    texel.a *= texture_tmp.a;\n  #else\n    texel *= texture_tmp;\n  #endif\n    vec2 screenSize = vec2(screenWidth, screenHeight);\n    vec2 pos = vec2(centerX, centerY );\n    vec2 center = pos.xy / screenSize.xy;\n    float blurStart = 1.0;\n    float blurWidth = blurStart / float(nsamples);\n    vec2 uv = v_uv0 - center;\n    float precompute = blurWidth * (1.0 / float(nsamples - 1));\n    vec4 color = vec4(0);\n    for (int i = 0; i < nsamples; i++)\n    {\n      float scale = blurStart + float(i) * precompute;\n      color += texture(texture, uv * scale + center);\n    }\n    texel = color / float(nsamples);\n    texel.a = opacity;\n  #else\n    texel *= v_color;\n  #endif\n  ALPHA_TEST(texel);\n  gl_FragColor = texel;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n#endif\nuniform float screenWidth;\nuniform float screenHeight;\nuniform float centerX;\nuniform float centerY;\nuniform float opacity;\nconst int nsamples = 10;\nvoid main () {\n  vec4 texel = vec4(1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    texel.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    texel.a *= texture_tmp.a;\n  #else\n    texel *= texture_tmp;\n  #endif\n    vec2 screenSize = vec2(screenWidth, screenHeight);\n    vec2 pos = vec2(centerX, centerY );\n    vec2 center = pos.xy / screenSize.xy;\n    float blurStart = 1.0;\n    float blurWidth = blurStart / float(nsamples);\n    vec2 uv = v_uv0 - center;\n    float precompute = blurWidth * (1.0 / float(nsamples - 1));\n    vec4 color = vec4(0);\n    for (int i = 0; i < nsamples; i++)\n    {\n      float scale = blurStart + float(i) * precompute;\n      color += texture2D(texture, uv * scale + center);\n    }\n    texel = color / float(nsamples);\n    texel.a = opacity;\n  #else\n    texel *= v_color;\n  #endif\n  ALPHA_TEST(texel);\n  gl_FragColor = texel;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","binding":1,"members":[{"name":"screenWidth","type":13,"count":1},{"name":"screenHeight","type":13,"count":1},{"name":"centerX","type":13,"count":1},{"name":"centerY","type":13,"count":1},{"name":"opacity","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"radial-blur|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"screenWidth":{"type":13,"value":[640],"inspector":{"displayName":"屏幕宽"}},"screenHeight":{"type":13,"value":[1422],"inspector":{"displayName":"屏幕高"}},"centerX":{"type":13,"value":[0],"inspector":{"displayName":"X"}},"centerY":{"type":13,"value":[0],"inspector":{"displayName":"Y"}},"opacity":{"type":13,"value":[1],"inspector":{"displayName":"透明度"}}}}]}]]],0,0,[],[],[]]