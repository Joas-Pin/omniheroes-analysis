[1,0,0,[["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4]],[[0,"gaussian-blur",[{"hash":3026561545,"record":null,"name":"gaussian-blur|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nout vec2 v_stride;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nuniform VertexInput {\n    vec2 stride;\n    float strideMultiply;\n};\nvoid main () {\n    vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n    pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n    v_color = a_color;\n    v_stride = stride.xy * max(1.0, strideMultiply);\n    gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_stride;\n#if USE_TEXTURE\n    in vec2 v_uv0;\n    uniform sampler2D texture;\n#endif\nuniform Constant {\n    float darkInt;\n};\nvoid main() {\n    vec3 color = vec3(0.0);\n    vec2 uv = v_uv0;\n    vec4 originalColor = texture2D(texture, uv);\n#if ENABLE_GAUSSIAN_BLUR\n    #if HIGH_QULAITY\n        color += texture2D(texture, uv + vec2(0, 0) * v_stride).rgb * 0.03978877;\n        color += texture2D(texture, uv + vec2(-1, -1) * v_stride).rgb * 0.03098753;\n        color += texture2D(texture, uv + vec2(0, -1) * v_stride).rgb * 0.03511347;\n        color += texture2D(texture, uv + vec2(1, -1) * v_stride).rgb * 0.03098753;\n        color += texture2D(texture, uv + vec2(-1, 0) * v_stride).rgb * 0.03511347;\n        color += texture2D(texture, uv + vec2(1, 0) * v_stride).rgb * 0.03511347;\n        color += texture2D(texture, uv + vec2(-1, 1) * v_stride).rgb * 0.03098753;\n        color += texture2D(texture, uv + vec2(0, 1) * v_stride).rgb * 0.03511347;\n        color += texture2D(texture, uv + vec2(1, 1) * v_stride).rgb * 0.03098753;\n        color += texture2D(texture, uv + vec2(-2, -2) * v_stride).rgb * 0.01463748;\n        color += texture2D(texture, uv + vec2(-1, -2) * v_stride).rgb * 0.0212974;\n        color += texture2D(texture, uv + vec2(0, -2) * v_stride).rgb * 0.02413311;\n        color += texture2D(texture, uv + vec2(1, -2) * v_stride).rgb * 0.0212974;\n        color += texture2D(texture, uv + vec2(2, -2) * v_stride).rgb * 0.01463748;\n        color += texture2D(texture, uv + vec2(-2, -1) * v_stride).rgb * 0.0212974;\n        color += texture2D(texture, uv + vec2(2, -1) * v_stride).rgb * 0.0212974;\n        color += texture2D(texture, uv + vec2(-2, 0) * v_stride).rgb * 0.02413311;\n        color += texture2D(texture, uv + vec2(2, 0) * v_stride).rgb * 0.02413311;\n        color += texture2D(texture, uv + vec2(-2, 1) * v_stride).rgb * 0.0212974;\n        color += texture2D(texture, uv + vec2(2, 1) * v_stride).rgb * 0.0212974;\n        color += texture2D(texture, uv + vec2(-2, 2) * v_stride).rgb * 0.01463748;\n        color += texture2D(texture, uv + vec2(-1, 2) * v_stride).rgb * 0.0212974;\n        color += texture2D(texture, uv + vec2(0, 2) * v_stride).rgb * 0.02413311;\n        color += texture2D(texture, uv + vec2(1, 2) * v_stride).rgb * 0.0212974;\n        color += texture2D(texture, uv + vec2(2, 2) * v_stride).rgb * 0.01463748;\n        color /= 0.6296542;\n    #else\n        color += texture2D(texture, uv + vec2(0, 0) * v_stride).rgb * 0.1591551;\n        color += texture2D(texture, uv + vec2(-1, -1) * v_stride).rgb * 0.05854992;\n        color += texture2D(texture, uv + vec2(0, -1) * v_stride).rgb * 0.09653246;\n        color += texture2D(texture, uv + vec2(1, -1) * v_stride).rgb * 0.05854992;\n        color += texture2D(texture, uv + vec2(-1, 0) * v_stride).rgb * 0.09653246;\n        color += texture2D(texture, uv + vec2(1, 0) * v_stride).rgb * 0.09653246;\n        color += texture2D(texture, uv + vec2(-1, 1) * v_stride).rgb * 0.05854992;\n        color += texture2D(texture, uv + vec2(0, 1) * v_stride).rgb * 0.09653246;\n        color += texture2D(texture, uv + vec2(1, 1) * v_stride).rgb * 0.05854992;\n        color /= 0.7794846;\n    #endif\n#else\n    color = originalColor.rgb;\n#endif\n#if ENABLE_DARK_EFFECT\n    color = mix(color, vec3(0.0, 0.0, 0.0), clamp(darkInt, 0.0, 1.0));\n#endif\n    gl_FragColor = vec4(color.rgb, originalColor.a) * v_color;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvarying vec2 v_stride;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nuniform vec2 stride;\nuniform float strideMultiply;\nvoid main () {\n    vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n    pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n    v_color = a_color;\n    v_stride = stride.xy * max(1.0, strideMultiply);\n    gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_stride;\n#if USE_TEXTURE\n    varying vec2 v_uv0;\n    uniform sampler2D texture;\n#endif\nuniform float darkInt;\nvoid main() {\n    vec3 color = vec3(0.0);\n    vec2 uv = v_uv0;\n    vec4 originalColor = texture2D(texture, uv);\n#if ENABLE_GAUSSIAN_BLUR\n    #if HIGH_QULAITY\n        color += texture2D(texture, uv + vec2(0, 0) * v_stride).rgb * 0.03978877;\n        color += texture2D(texture, uv + vec2(-1, -1) * v_stride).rgb * 0.03098753;\n        color += texture2D(texture, uv + vec2(0, -1) * v_stride).rgb * 0.03511347;\n        color += texture2D(texture, uv + vec2(1, -1) * v_stride).rgb * 0.03098753;\n        color += texture2D(texture, uv + vec2(-1, 0) * v_stride).rgb * 0.03511347;\n        color += texture2D(texture, uv + vec2(1, 0) * v_stride).rgb * 0.03511347;\n        color += texture2D(texture, uv + vec2(-1, 1) * v_stride).rgb * 0.03098753;\n        color += texture2D(texture, uv + vec2(0, 1) * v_stride).rgb * 0.03511347;\n        color += texture2D(texture, uv + vec2(1, 1) * v_stride).rgb * 0.03098753;\n        color += texture2D(texture, uv + vec2(-2, -2) * v_stride).rgb * 0.01463748;\n        color += texture2D(texture, uv + vec2(-1, -2) * v_stride).rgb * 0.0212974;\n        color += texture2D(texture, uv + vec2(0, -2) * v_stride).rgb * 0.02413311;\n        color += texture2D(texture, uv + vec2(1, -2) * v_stride).rgb * 0.0212974;\n        color += texture2D(texture, uv + vec2(2, -2) * v_stride).rgb * 0.01463748;\n        color += texture2D(texture, uv + vec2(-2, -1) * v_stride).rgb * 0.0212974;\n        color += texture2D(texture, uv + vec2(2, -1) * v_stride).rgb * 0.0212974;\n        color += texture2D(texture, uv + vec2(-2, 0) * v_stride).rgb * 0.02413311;\n        color += texture2D(texture, uv + vec2(2, 0) * v_stride).rgb * 0.02413311;\n        color += texture2D(texture, uv + vec2(-2, 1) * v_stride).rgb * 0.0212974;\n        color += texture2D(texture, uv + vec2(2, 1) * v_stride).rgb * 0.0212974;\n        color += texture2D(texture, uv + vec2(-2, 2) * v_stride).rgb * 0.01463748;\n        color += texture2D(texture, uv + vec2(-1, 2) * v_stride).rgb * 0.0212974;\n        color += texture2D(texture, uv + vec2(0, 2) * v_stride).rgb * 0.02413311;\n        color += texture2D(texture, uv + vec2(1, 2) * v_stride).rgb * 0.0212974;\n        color += texture2D(texture, uv + vec2(2, 2) * v_stride).rgb * 0.01463748;\n        color /= 0.6296542;\n    #else\n        color += texture2D(texture, uv + vec2(0, 0) * v_stride).rgb * 0.1591551;\n        color += texture2D(texture, uv + vec2(-1, -1) * v_stride).rgb * 0.05854992;\n        color += texture2D(texture, uv + vec2(0, -1) * v_stride).rgb * 0.09653246;\n        color += texture2D(texture, uv + vec2(1, -1) * v_stride).rgb * 0.05854992;\n        color += texture2D(texture, uv + vec2(-1, 0) * v_stride).rgb * 0.09653246;\n        color += texture2D(texture, uv + vec2(1, 0) * v_stride).rgb * 0.09653246;\n        color += texture2D(texture, uv + vec2(-1, 1) * v_stride).rgb * 0.05854992;\n        color += texture2D(texture, uv + vec2(0, 1) * v_stride).rgb * 0.09653246;\n        color += texture2D(texture, uv + vec2(1, 1) * v_stride).rgb * 0.05854992;\n        color /= 0.7794846;\n    #endif\n#else\n    color = originalColor.rgb;\n#endif\n#if ENABLE_DARK_EFFECT\n    color = mix(color, vec3(0.0, 0.0, 0.0), clamp(darkInt, 0.0, 1.0));\n#endif\n    gl_FragColor = vec4(color.rgb, originalColor.a) * v_color;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ENABLE_GAUSSIAN_BLUR","type":"boolean","defines":[]},{"name":"HIGH_QULAITY","type":"boolean","defines":["ENABLE_GAUSSIAN_BLUR"]},{"name":"ENABLE_DARK_EFFECT","type":"boolean","defines":[]}],"blocks":[{"name":"VertexInput","binding":0,"members":[{"name":"stride","type":14,"count":1},{"name":"strideMultiply","type":13,"count":1}],"defines":[]},{"name":"ALPHA_TEST","binding":1,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","binding":2,"members":[{"name":"darkInt","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"gaussian-blur|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"stride":{"type":14,"value":[1,1]},"strideMultiply":{"type":13,"value":[1]},"darkInt":{"type":13,"value":[0.45]}}}]}]]],0,0,[],[],[]]