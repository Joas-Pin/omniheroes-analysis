[1,0,0,[["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4]],[[0,"outter-flame",[{"hash":2823144451,"record":null,"name":"outter-flame|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D noiseTexture;\n#endif\nuniform Constant {\n    vec4 flameColor;\n    vec2 centerUV;\n    float edgeNoiseEffective;\n    float flameEdgeWidth;\n    float flamePow;\n    float flameIntensity;\n    float radio;\n    float st;\n};\nvoid main() {\n    vec4 textureCol = texture2D(texture, v_uv0);\n    vec2 uv = v_uv0 * vec2(st, 1.0);\n    float f = texture2D(noiseTexture, uv * 1.5 + radio).r * edgeNoiseEffective;\n    float dist = 1.0 + distance(centerUV * vec2(st, 1.0), uv) + f - radio;\n  #if REVERSE_DIRECTION\n    dist = smoothstep(1.0, (1.0 - clamp(flameEdgeWidth, 0.0, 1.0)), dist);\n  #else\n    dist = smoothstep((1.0 - clamp(flameEdgeWidth, 0.0, 1.0)), 1.0, dist);\n  #endif\n    float alpha = 1.0 - dist;\n    float burnIntensity = alpha;\n  #if REVERSE_FLAME_DIRECTION\n    burnIntensity = 1.0 - burnIntensity;\n  #endif\n    float finalAlpha = smoothstep(0.0, 0.8, alpha * textureCol.a);\n    vec3 fireCol = flameColor.rgb * pow(burnIntensity, flamePow) * flameIntensity;\n    vec3 finalColor = mix(textureCol.rgb, fireCol, smoothstep(0.2, 0.3, 1. - alpha));\n    gl_FragColor = vec4(finalColor * finalAlpha, finalAlpha) * v_color;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D noiseTexture;\n#endif\nuniform vec4 flameColor;\nuniform vec2 centerUV;\nuniform float edgeNoiseEffective;\nuniform float flameEdgeWidth;\nuniform float flamePow;\nuniform float flameIntensity;\nuniform float radio;\nuniform float st;\nvoid main() {\n    vec4 textureCol = texture2D(texture, v_uv0);\n    vec2 uv = v_uv0 * vec2(st, 1.0);\n    float f = texture2D(noiseTexture, uv * 1.5 + radio).r * edgeNoiseEffective;\n    float dist = 1.0 + distance(centerUV * vec2(st, 1.0), uv) + f - radio;\n  #if REVERSE_DIRECTION\n    dist = smoothstep(1.0, (1.0 - clamp(flameEdgeWidth, 0.0, 1.0)), dist);\n  #else\n    dist = smoothstep((1.0 - clamp(flameEdgeWidth, 0.0, 1.0)), 1.0, dist);\n  #endif\n    float alpha = 1.0 - dist;\n    float burnIntensity = alpha;\n  #if REVERSE_FLAME_DIRECTION\n    burnIntensity = 1.0 - burnIntensity;\n  #endif\n    float finalAlpha = smoothstep(0.0, 0.8, alpha * textureCol.a);\n    vec3 fireCol = flameColor.rgb * pow(burnIntensity, flamePow) * flameIntensity;\n    vec3 finalColor = mix(textureCol.rgb, fireCol, smoothstep(0.2, 0.3, 1. - alpha));\n    gl_FragColor = vec4(finalColor * finalAlpha, finalAlpha) * v_color;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"REVERSE_DIRECTION","type":"boolean","defines":[]},{"name":"REVERSE_FLAME_DIRECTION","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","binding":1,"members":[{"name":"flameColor","type":16,"count":1},{"name":"centerUV","type":14,"count":1},{"name":"edgeNoiseEffective","type":13,"count":1},{"name":"flameEdgeWidth","type":13,"count":1},{"name":"flamePow","type":13,"count":1},{"name":"flameIntensity","type":13,"count":1},{"name":"radio","type":13,"count":1},{"name":"st","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]},{"name":"noiseTexture","type":29,"count":1,"binding":31,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"outter-flame|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"noiseTexture":{"value":"white","type":29},"edgeNoiseEffective":{"type":13,"value":[0.3]},"flameEdgeWidth":{"type":13,"value":[0.13]},"centerUV":{"type":14,"value":[0.5,0.5]},"st":{"type":13,"value":[1]},"flamePow":{"type":13,"value":[2.3]},"flameIntensity":{"type":13,"value":[23]},"flameColor":{"type":16,"value":[0.8,0.3,0.1,1],"editor":{"type":"color"}},"radio":{"type":13,"value":[0.7]}}}]}]]],0,0,[],[],[]]