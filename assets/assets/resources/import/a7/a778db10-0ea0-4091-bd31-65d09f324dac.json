[1,0,0,[["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4]],[[0,"radiation-blur",[{"hash":2668092576,"record":null,"name":"radiation-blur|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\n  precision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\n  in vec4 v_color;\n  #if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  uniform Constant {\n    float u_focusX;\n    float u_focusY;\n    float u_time;\n  };\nvec4 blurWeighted()\n{\n  vec2 center = vec2(u_focusX, u_focusY);\n    vec2 pointToCenter = v_uv0 - center;\n    float mStepping = u_time;\n    vec2 p1 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p2 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p3 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p4 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p5 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p6 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p7 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p8 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p9 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p10 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    vec4 finalColor = texture(texture, p1) * 0.4;\n    finalColor += texture(texture, p2) * 0.2;\n    finalColor += texture(texture, p3) * 0.15;\n    finalColor += texture(texture, p4) * 0.08;\n    finalColor += texture(texture, p5) * 0.05;\n    finalColor += texture(texture, p6) * 0.04;\n    finalColor += texture(texture, p7) * 0.02;\n    finalColor += texture(texture, p8) * 0.02;\n    finalColor += texture(texture, p9) * 0.02;\n    finalColor += texture(texture, p10) * 0.02;\n    return finalColor;\n}\nvec4 blurNormally()\n{\n  vec2 center = vec2(u_focusX, u_focusY);\n    vec2 pointToCenter = v_uv0 - center;\n    float mStepping = u_time;\n    vec2 p1 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p2 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p3 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p4 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p5 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p6 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p7 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p8 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p9 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p10 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    vec4 finalColor = texture(texture, p1);\n    finalColor += texture(texture, p2);\n    finalColor += texture(texture, p3);\n    finalColor += texture(texture, p4);\n    finalColor += texture(texture, p5);\n    finalColor += texture(texture, p6);\n    finalColor += texture(texture, p7);\n    finalColor += texture(texture, p8);\n    finalColor += texture(texture, p9);\n    finalColor += texture(texture, p10);\n    return finalColor *= 0.1;\n}\nvoid main(void)\n{\n  #if !USE_TEXTURE\n    gl_FragColor = v_color;\n  #else\n    #if WITH_WEIGHT\n      gl_FragColor = blurWeighted() * v_color;\n    #else\n      gl_FragColor = blurNormally() * v_color;\n    #endif\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\n  precision highp float;\n#if USE_ALPHA_TEST\n#endif\n  varying vec4 v_color;\n  #if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  uniform float u_focusX;\nuniform float u_focusY;\nuniform float u_time;\nvec4 blurWeighted()\n{\n  vec2 center = vec2(u_focusX, u_focusY);\n    vec2 pointToCenter = v_uv0 - center;\n    float mStepping = u_time;\n    vec2 p1 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p2 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p3 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p4 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p5 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p6 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p7 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p8 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p9 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p10 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    vec4 finalColor = texture2D(texture, p1) * 0.4;\n    finalColor += texture2D(texture, p2) * 0.2;\n    finalColor += texture2D(texture, p3) * 0.15;\n    finalColor += texture2D(texture, p4) * 0.08;\n    finalColor += texture2D(texture, p5) * 0.05;\n    finalColor += texture2D(texture, p6) * 0.04;\n    finalColor += texture2D(texture, p7) * 0.02;\n    finalColor += texture2D(texture, p8) * 0.02;\n    finalColor += texture2D(texture, p9) * 0.02;\n    finalColor += texture2D(texture, p10) * 0.02;\n    return finalColor;\n}\nvec4 blurNormally()\n{\n  vec2 center = vec2(u_focusX, u_focusY);\n    vec2 pointToCenter = v_uv0 - center;\n    float mStepping = u_time;\n    vec2 p1 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p2 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p3 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p4 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p5 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p6 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p7 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p8 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p9 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    mStepping += u_time;\n    vec2 p10 = vec2(pointToCenter.x * (1.0 - mStepping), pointToCenter.y * (1.0 - mStepping)) + center;\n    vec4 finalColor = texture2D(texture, p1);\n    finalColor += texture2D(texture, p2);\n    finalColor += texture2D(texture, p3);\n    finalColor += texture2D(texture, p4);\n    finalColor += texture2D(texture, p5);\n    finalColor += texture2D(texture, p6);\n    finalColor += texture2D(texture, p7);\n    finalColor += texture2D(texture, p8);\n    finalColor += texture2D(texture, p9);\n    finalColor += texture2D(texture, p10);\n    return finalColor *= 0.1;\n}\nvoid main(void)\n{\n  #if !USE_TEXTURE\n    gl_FragColor = v_color;\n  #else\n    #if WITH_WEIGHT\n      gl_FragColor = blurWeighted() * v_color;\n    #else\n      gl_FragColor = blurNormally() * v_color;\n    #endif\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"WITH_WEIGHT","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","binding":1,"members":[{"name":"u_focusX","type":13,"count":1},{"name":"u_focusY","type":13,"count":1},{"name":"u_time","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"radiation-blur|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"u_focusX":{"type":13,"value":[0.5],"inspector":{"displayName":"聚焦点X"}},"u_focusY":{"type":13,"value":[0.5],"inspector":{"displayName":"聚焦点Y"}},"u_time":{"type":13,"value":[0.015],"inspector":{"displayName":"-0.015 到 0.015之间效果最佳"}}}}]}]]],0,0,[],[],[]]