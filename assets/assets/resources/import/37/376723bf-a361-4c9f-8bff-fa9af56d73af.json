[1,0,0,[["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4]],[[0,"scanning",[{"hash":150658437,"record":null,"name":"scanning|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform STEP {\n  vec4 setBarColor;\n  float setSpeed;\n  float setWidth;\n  float setRotate;\n  float setDistance;\n  float opacity;\n};\n#endif\nvec4 getLightColor(vec2 curCoord, float inOpacity, float curRotate)\n{\n  float stxy = curCoord.x;\n  if(curRotate <= 45.0)\n  {\n    stxy = curCoord.x + curCoord.y * curRotate/45.0;\n  }\n  else\n  {\n    curRotate = 90.0 - curRotate;\n    stxy = curCoord.y + curCoord.x * curRotate/45.0;\n  }\n  float leftpacity = smoothstep(0.5 - setWidth, 0.5, stxy);\n  float rightOpacity = smoothstep(0.5 + setWidth, 0.5, stxy);\n  inOpacity = inOpacity * leftpacity * rightOpacity;\n  return vec4(setBarColor.rgb, inOpacity);\n}\nvec4 composite(vec4 over, vec4 under)\n{\n  return under + over.a * over;\n}\nvoid main () {\n  vec4 textureColor = vec4(1, 1, 1, 1);\n  float timeSpeed = cc_time[0] * setSpeed;\n  float curOffset = 0.5 - mod(timeSpeed, setDistance);\n  vec2 curCoord = vec2(curOffset, curOffset) + v_uv0;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    textureColor.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    textureColor.a *= texture_tmp.a;\n  #else\n    textureColor *= texture_tmp;\n  #endif\n  #endif\n  vec4 lightColor = getLightColor(curCoord, textureColor.a, setRotate);\n  lightColor.a *= opacity;\n  gl_FragColor = composite(lightColor, textureColor) * v_color;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec4 setBarColor;\nuniform float setSpeed;\nuniform float setWidth;\nuniform float setRotate;\nuniform float setDistance;\nuniform float opacity;\n#endif\nvec4 getLightColor(vec2 curCoord, float inOpacity, float curRotate)\n{\n  float stxy = curCoord.x;\n  if(curRotate <= 45.0)\n  {\n    stxy = curCoord.x + curCoord.y * curRotate/45.0;\n  }\n  else\n  {\n    curRotate = 90.0 - curRotate;\n    stxy = curCoord.y + curCoord.x * curRotate/45.0;\n  }\n  float leftpacity = smoothstep(0.5 - setWidth, 0.5, stxy);\n  float rightOpacity = smoothstep(0.5 + setWidth, 0.5, stxy);\n  inOpacity = inOpacity * leftpacity * rightOpacity;\n  return vec4(setBarColor.rgb, inOpacity);\n}\nvec4 composite(vec4 over, vec4 under)\n{\n  return under + over.a * over;\n}\nvoid main () {\n  vec4 textureColor = vec4(1, 1, 1, 1);\n  float timeSpeed = cc_time[0] * setSpeed;\n  float curOffset = 0.5 - mod(timeSpeed, setDistance);\n  vec2 curCoord = vec2(curOffset, curOffset) + v_uv0;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    textureColor.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    textureColor.a *= texture_tmp.a;\n  #else\n    textureColor *= texture_tmp;\n  #endif\n  #endif\n  vec4 lightColor = getLightColor(curCoord, textureColor.a, setRotate);\n  lightColor.a *= opacity;\n  gl_FragColor = composite(lightColor, textureColor) * v_color;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"STEP","binding":1,"members":[{"name":"setBarColor","type":16,"count":1},{"name":"setSpeed","type":13,"count":1},{"name":"setWidth","type":13,"count":1},{"name":"setRotate","type":13,"count":1},{"name":"setDistance","type":13,"count":1},{"name":"opacity","type":13,"count":1}],"defines":["USE_TEXTURE"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"scanning|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"setBarColor":{"type":16,"value":[0.5,0.45,0.4,0]},"setSpeed":{"type":13,"value":[2]},"setWidth":{"type":13,"value":[0.15]},"setRotate":{"type":13,"value":[45]},"setDistance":{"type":13,"value":[1.5]},"opacity":{"type":13,"value":[0.1]}}}]}]]],0,0,[],[],[]]