[1,0,0,[["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4]],[[0,"qe-material",[{"hash":2280633462,"record":null,"name":"qe-material|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\n#if QE_USE_MASK\nout vec2 mask_uv0;\nuniform MASK{\n    mediump mat4 mat_mask;\n};\n#endif\n#if QE_USE_3D\nuniform MAT_3D{\n    mediump mat4 mat_3d;\n};\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  mat4 mat_vp = cc_matViewProj;\n  #if QE_USE_3D\n      mat_vp = mat_3d;\n  #endif\n  #if QE_USE_MASK\n    vec4 mask_pos;\n    #if CC_USE_MODEL\n    mask_pos = mat_mask * cc_matWorld * pos;\n    #else\n    mask_pos = mat_mask  * pos;\n    #endif\n    mask_uv0 = vec2(mask_pos.x+0.5, 0.5-mask_pos.y);\n  #endif\n  #if CC_USE_MODEL\n  pos = mat_vp * cc_matWorld * pos;\n  #else\n  pos = mat_vp * pos;\n  #endif\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\nin vec4 v_color;\nin vec2 v_uv0;\n#if QE_USE_LIGHT\nuniform LIGHT{\n    vec4 light_h;\n    vec4 light_m;\n    vec4 light_l;\n    float blend;\n};\n#endif\n#if QE_USE_MASK\nuniform sampler2D texture2;\nuniform MASK_FS{\n  float mask_alpha;\n};\nin vec2 mask_uv0;\n#endif\nuniform DARK {\n  float dark;\n};\nuniform sampler2D texture;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  o *= texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_TEXTURE\n  o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  o *= v_color;\n  #if QE_USE_LIGHT\n  float x = (o.r + o.g + o.b)/3.0;\n  float dl = min(x,  0.5);\n  float dm = abs(0.5 - x);\n  float dh = min(1.0-x, 0.5);\n  vec4 lightColor = o;\n  lightColor.rgb = light_l.rgb*(1.0-2.0*dl) + light_m.rgb*(1.0-2.0*dm) + light_h.rgb*(1.0-2.0*dh);\n  lightColor.rgb = lightColor.rgb*(1.0-blend) + blend*o.rgb;\n  o = lightColor;\n  #endif\n  #if QE_USE_MASK\n  o.a *= texture2D(texture2, mask_uv0).a * mask_alpha;\n  #endif\n  o.rgb *= dark;\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#if QE_USE_MASK\nvarying vec2 mask_uv0;\nuniform mediump mat4 mat_mask;\n#endif\n#if QE_USE_3D\nuniform mediump mat4 mat_3d;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  mat4 mat_vp = cc_matViewProj;\n  #if QE_USE_3D\n      mat_vp = mat_3d;\n  #endif\n  #if QE_USE_MASK\n    vec4 mask_pos;\n    #if CC_USE_MODEL\n    mask_pos = mat_mask * cc_matWorld * pos;\n    #else\n    mask_pos = mat_mask  * pos;\n    #endif\n    mask_uv0 = vec2(mask_pos.x+0.5, 0.5-mask_pos.y);\n  #endif\n  #if CC_USE_MODEL\n  pos = mat_vp * cc_matWorld * pos;\n  #else\n  pos = mat_vp * pos;\n  #endif\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\n#if QE_USE_LIGHT\nuniform vec4 light_h;\nuniform vec4 light_m;\nuniform vec4 light_l;\nuniform float blend;\n#endif\n#if QE_USE_MASK\nuniform sampler2D texture2;\nuniform float mask_alpha;\nvarying vec2 mask_uv0;\n#endif\nuniform float dark;\nuniform sampler2D texture;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  o *= texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_TEXTURE\n  o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  o *= v_color;\n  #if QE_USE_LIGHT\n  float x = (o.r + o.g + o.b)/3.0;\n  float dl = min(x,  0.5);\n  float dm = abs(0.5 - x);\n  float dh = min(1.0-x, 0.5);\n  vec4 lightColor = o;\n  lightColor.rgb = light_l.rgb*(1.0-2.0*dl) + light_m.rgb*(1.0-2.0*dm) + light_h.rgb*(1.0-2.0*dh);\n  lightColor.rgb = lightColor.rgb*(1.0-blend) + blend*o.rgb;\n  o = lightColor;\n  #endif\n  #if QE_USE_MASK\n  o.a *= texture2D(texture2, mask_uv0).a * mask_alpha;\n  #endif\n  o.rgb *= dark;\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"QE_USE_MASK","type":"boolean","defines":[]},{"name":"QE_USE_3D","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"QE_USE_LIGHT","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_TEXTURE","type":"boolean","defines":[]}],"blocks":[{"name":"MASK","binding":0,"members":[{"name":"mat_mask","type":26,"count":1}],"defines":["QE_USE_MASK"]},{"name":"MAT_3D","binding":1,"members":[{"name":"mat_3d","type":26,"count":1}],"defines":["QE_USE_3D"]},{"name":"LIGHT","binding":2,"members":[{"name":"light_h","type":16,"count":1},{"name":"light_m","type":16,"count":1},{"name":"light_l","type":16,"count":1},{"name":"blend","type":13,"count":1}],"defines":["QE_USE_LIGHT"]},{"name":"MASK_FS","binding":3,"members":[{"name":"mask_alpha","type":13,"count":1}],"defines":["QE_USE_MASK"]},{"name":"DARK","binding":4,"members":[{"name":"dark","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture2","type":29,"count":1,"binding":30,"defines":["QE_USE_MASK"]},{"name":"texture","type":29,"count":1,"binding":31,"defines":[]}]},{"hash":3483028033,"record":null,"name":"qe-material|vs_spine|fs_spine","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nout vec4 v_light;\n#if USE_TINT\nin vec4 a_color0;\nin vec4 v_dark;\n#endif\n#if QE_USE_MASK\nout vec2 mask_uv0;\nuniform MASK{\n    mediump mat4 mat_mask;\n};\n#endif\n#if QE_USE_3D\nuniform MAT_3D{\n    mediump mat4 mat_3d;\n};\n#endif\nvoid main () {\n  mat4 mat_vp = cc_matViewProj;\n  #if QE_USE_3D\n      mat_vp = mat_3d;\n  #endif\n  mat4 mvp;\n  #if CC_USE_MODEL\n      mvp = mat_vp * cc_matWorld;\n  #else\n      mvp = mat_vp;\n  #endif\n  vec4 pos = vec4(a_position, 1);\n  #if QE_USE_MASK\n    vec4 mask_pos;\n    #if CC_USE_MODEL\n    mask_pos = mat_mask * cc_matWorld * pos;\n    #else\n    mask_pos = mat_mask  * pos;\n    #endif\n    mask_uv0 = vec2(mask_pos.x+0.5, 0.5-mask_pos.y);\n  #endif\n  v_uv0 = a_uv0;\n  v_light = a_color;\n  #if USE_TINT\n      v_dark = a_color0;\n  #endif\n  gl_Position = mvp * pos;\n}","frag":"\nprecision highp float;\nin vec4 v_color;\nin vec4 v_light;\nin vec2 v_uv0;\nuniform sampler2D texture;\n#if USE_TINT\nin vec4 v_dark;\n#endif\n#if USE_ALPHA_TEST\nuniform ALPHATHRESHOLD{\n     float alphaThreshold;\n};\n#endif\nvoid ALPHA_TEST (vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (float alpha) {\n    #if USE_ALPHA_TEST\n        if (alpha < alphaThreshold) discard;\n    #endif\n}\n#if QE_USE_LIGHT\nuniform LIGHT{\n    vec4 light_h;\n    vec4 light_m;\n    vec4 light_l;\n    float blend;\n};\n#endif\n#if QE_USE_MASK\nuniform sampler2D texture2;\nin vec2 mask_uv0;\n  uniform MASK_FS{\n  float mask_alpha;\n};\n#endif\nuniform DARK {\n  float dark;\n};\nvoid main () {\n  vec4 texColor = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_TEXTURE\n      texColor.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  vec4 finalColor;\n  #if USE_TINT\n      finalColor.a = v_light.a * texColor.a;\n      finalColor.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;\n  #else\n      finalColor = texColor * v_light;\n  #endif\n  ALPHA_TEST(finalColor);\n  #if QE_USE_LIGHT\n  vec4 ligthColor = finalColor;\n  float x = (ligthColor.r + ligthColor.g + ligthColor.b)/3.0;\n  float dl = min(x,  0.5);\n  float dm = abs(0.5 - x);\n  float dh = min(1.0-x, 0.5);\n  ligthColor.rgb = light_l.rgb*(1.0-2.0*dl) + light_m.rgb*(1.0-2.0*dm) + light_h.rgb*(1.0-2.0*dh);\n  ligthColor.rgb = ligthColor.rgb*finalColor.a;\n  ligthColor.rgb = ligthColor.rgb*(1.0-blend) + blend*finalColor.rgb;\n  finalColor = ligthColor;\n  #endif\n  #if QE_USE_MASK\n  vec4 mask =  texture2D(texture2, mask_uv0);\n  finalColor.rgb *= mask.a * mask_alpha;\n  finalColor.a *= mask.a * mask_alpha;\n  #endif\n  finalColor.rgb *= dark;\n  gl_FragColor = finalColor;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvarying vec4 v_light;\n#if USE_TINT\nattribute vec4 a_color0;\nattribute vec4 v_dark;\n#endif\n#if QE_USE_MASK\nvarying vec2 mask_uv0;\nuniform mediump mat4 mat_mask;\n#endif\n#if QE_USE_3D\nuniform mediump mat4 mat_3d;\n#endif\nvoid main () {\n  mat4 mat_vp = cc_matViewProj;\n  #if QE_USE_3D\n      mat_vp = mat_3d;\n  #endif\n  mat4 mvp;\n  #if CC_USE_MODEL\n      mvp = mat_vp * cc_matWorld;\n  #else\n      mvp = mat_vp;\n  #endif\n  vec4 pos = vec4(a_position, 1);\n  #if QE_USE_MASK\n    vec4 mask_pos;\n    #if CC_USE_MODEL\n    mask_pos = mat_mask * cc_matWorld * pos;\n    #else\n    mask_pos = mat_mask  * pos;\n    #endif\n    mask_uv0 = vec2(mask_pos.x+0.5, 0.5-mask_pos.y);\n  #endif\n  v_uv0 = a_uv0;\n  v_light = a_color;\n  #if USE_TINT\n      v_dark = a_color0;\n  #endif\n  gl_Position = mvp * pos;\n}","frag":"\nprecision highp float;\nvarying vec4 v_color;\nvarying vec4 v_light;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#if USE_TINT\nvarying vec4 v_dark;\n#endif\n#if USE_ALPHA_TEST\nuniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (float alpha) {\n    #if USE_ALPHA_TEST\n        if (alpha < alphaThreshold) discard;\n    #endif\n}\n#if QE_USE_LIGHT\nuniform vec4 light_h;\nuniform vec4 light_m;\nuniform vec4 light_l;\nuniform float blend;\n#endif\n#if QE_USE_MASK\nuniform sampler2D texture2;\nvarying vec2 mask_uv0;\n  uniform float mask_alpha;\n#endif\nuniform float dark;\nvoid main () {\n  vec4 texColor = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_TEXTURE\n      texColor.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  vec4 finalColor;\n  #if USE_TINT\n      finalColor.a = v_light.a * texColor.a;\n      finalColor.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;\n  #else\n      finalColor = texColor * v_light;\n  #endif\n  ALPHA_TEST(finalColor);\n  #if QE_USE_LIGHT\n  vec4 ligthColor = finalColor;\n  float x = (ligthColor.r + ligthColor.g + ligthColor.b)/3.0;\n  float dl = min(x,  0.5);\n  float dm = abs(0.5 - x);\n  float dh = min(1.0-x, 0.5);\n  ligthColor.rgb = light_l.rgb*(1.0-2.0*dl) + light_m.rgb*(1.0-2.0*dm) + light_h.rgb*(1.0-2.0*dh);\n  ligthColor.rgb = ligthColor.rgb*finalColor.a;\n  ligthColor.rgb = ligthColor.rgb*(1.0-blend) + blend*finalColor.rgb;\n  finalColor = ligthColor;\n  #endif\n  #if QE_USE_MASK\n  vec4 mask =  texture2D(texture2, mask_uv0);\n  finalColor.rgb *= mask.a * mask_alpha;\n  finalColor.a *= mask.a * mask_alpha;\n  #endif\n  finalColor.rgb *= dark;\n  gl_FragColor = finalColor;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TINT","type":"boolean","defines":[]},{"name":"QE_USE_MASK","type":"boolean","defines":[]},{"name":"QE_USE_3D","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"QE_USE_LIGHT","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_TEXTURE","type":"boolean","defines":[]}],"blocks":[{"name":"MASK","binding":0,"members":[{"name":"mat_mask","type":26,"count":1}],"defines":["QE_USE_MASK"]},{"name":"MAT_3D","binding":1,"members":[{"name":"mat_3d","type":26,"count":1}],"defines":["QE_USE_3D"]},{"name":"ALPHATHRESHOLD","binding":2,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"LIGHT","binding":3,"members":[{"name":"light_h","type":16,"count":1},{"name":"light_m","type":16,"count":1},{"name":"light_l","type":16,"count":1},{"name":"blend","type":13,"count":1}],"defines":["QE_USE_LIGHT"]},{"name":"MASK_FS","binding":4,"members":[{"name":"mask_alpha","type":13,"count":1}],"defines":["QE_USE_MASK"]},{"name":"DARK","binding":5,"members":[{"name":"dark","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]},{"name":"texture2","type":29,"count":1,"binding":31,"defines":["QE_USE_MASK"]}]}],[{"passes":[{"program":"qe-material|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"light_h":{"type":16,"value":[1,1,1,1]},"light_m":{"type":16,"value":[0.5,0.4,0.3,1]},"light_l":{"type":16,"value":[0,0,0,1]},"blend":{"type":13,"value":[0]},"mat_mask":{"type":26,"value":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},"mask_alpha":{"type":13,"value":[0.5]},"dark":{"type":13,"value":[1]}}}]},{"passes":[{"program":"qe-material|vs_spine|fs_spine","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"light_h":{"type":16,"value":[1,1,1,1]},"light_m":{"type":16,"value":[0.5,0.4,0.3,1]},"light_l":{"type":16,"value":[0,0,0,1]},"blend":{"type":13,"value":[0]},"mat_mask":{"type":26,"value":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},"mask_alpha":{"type":13,"value":[1]},"dark":{"type":13,"value":[1]}}}]}]]],0,0,[],[],[]]