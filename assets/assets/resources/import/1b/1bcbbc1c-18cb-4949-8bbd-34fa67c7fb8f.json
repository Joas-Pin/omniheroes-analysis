[1,0,0,[["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4]],[[0,"hot-contort",[{"hash":3932547702,"record":null,"name":"hot-contort|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\n  in vec2 a_uv0;\n  out vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\nuniform sampler2D noiseTexture;\n#if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n#endif\nuniform Factor {\n   float speedFactor;\n   float strengthFactor;\n};\nvoid main () {\n  vec4 o = vec4(1);\n  vec4 noise = vec4(1);\n  vec2 uv_temp = v_uv0;\n  vec2 npos = v_uv0 + cc_time[0] * speedFactor;\n  float nx = mod(npos.x , 2.0) < 1.0 ? fract(npos.x) : 1.0 - fract(npos.x);\n  float ny = mod(npos.y , 2.0) < 1.0 ? fract(npos.y) : 1.0 - fract(npos.y);\n  vec4 noiseTexture_tmp = texture(noiseTexture, vec2(nx, ny));\n  #if CC_USE_ALPHA_ATLAS_noiseTexture\n      noiseTexture_tmp.a *= texture(noiseTexture, vec2(nx, ny) + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    noise.rgb *= (noiseTexture_tmp.rgb * noiseTexture_tmp.rgb);\n    noise.a *= noiseTexture_tmp.a;\n  #else\n    noise *= noiseTexture_tmp;\n  #endif\n  uv_temp += noise.xy * strengthFactor * 0.5;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, uv_temp);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, uv_temp + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\n  attribute vec2 a_uv0;\n  varying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\nuniform sampler2D noiseTexture;\n#if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n#endif\nuniform float speedFactor;\nuniform float strengthFactor;\nvoid main () {\n  vec4 o = vec4(1);\n  vec4 noise = vec4(1);\n  vec2 uv_temp = v_uv0;\n  vec2 npos = v_uv0 + cc_time[0] * speedFactor;\n  float nx = mod(npos.x , 2.0) < 1.0 ? fract(npos.x) : 1.0 - fract(npos.x);\n  float ny = mod(npos.y , 2.0) < 1.0 ? fract(npos.y) : 1.0 - fract(npos.y);\n  vec4 noiseTexture_tmp = texture2D(noiseTexture, vec2(nx, ny));\n  #if CC_USE_ALPHA_ATLAS_noiseTexture\n      noiseTexture_tmp.a *= texture2D(noiseTexture, vec2(nx, ny) + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    noise.rgb *= (noiseTexture_tmp.rgb * noiseTexture_tmp.rgb);\n    noise.a *= noiseTexture_tmp.a;\n  #else\n    noise *= noiseTexture_tmp;\n  #endif\n  uv_temp += noise.xy * strengthFactor * 0.5;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, uv_temp);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, uv_temp + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_noiseTexture","type":"boolean","defines":[]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Factor","binding":1,"members":[{"name":"speedFactor","type":13,"count":1},{"name":"strengthFactor","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"noiseTexture","type":29,"count":1,"binding":30,"defines":[]},{"name":"texture","type":29,"count":1,"binding":31,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"hot-contort|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"noiseTexture":{"value":"white","type":29},"speedFactor":{"type":13,"value":[0.1],"inspector":{"displayName":"速度","range":[0,1]}},"strengthFactor":{"type":13,"value":[0.1],"inspector":{"displayName":"强度","range":[-0.5,0.5]}}}}]}]]],0,0,[],[],[]]