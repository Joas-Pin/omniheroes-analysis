[1,0,0,[["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4]],[[0,"burnning-one",[{"hash":1614296752,"record":null,"name":"burnning-one|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nfloat fbm_random (in vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    float a = fbm_random(i);\n    float b = fbm_random(i + vec2(1.0, 0.0));\n    float c = fbm_random(i + vec2(0.0, 1.0));\n    float d = fbm_random(i + vec2(1.0, 1.0));\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\nfloat fbm(in vec2 st) {\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    value += amplitude * noise(st);\n    st *= 2.0;\n    amplitude *= 0.5;\n    value += amplitude * noise(st);\n    st *= 2.0;\n    amplitude *= 0.5;\n    value += amplitude * noise(st);\n    st *= 2.0;\n    amplitude *= 0.5;\n    value += amplitude * noise(st);\n    st *= 2.0;\n    amplitude *= 0.5;\n    value += amplitude * noise(st);\n    st *= 2.0;\n    amplitude *= 0.5;\n    return value;\n}\nstruct SurfaceData\n{\n    vec3 PositionWS;\n    vec3 NormalWS;\n    float Smoothness;\n    float Metallic;\n    vec2 uv;\n};\nstruct PBRVariables\n{\n    float PerceptualRoughness;\n    float Roughness;\n    float Roughness2;\n    float Roughness2MinusOne;\n    float NormalizationTerm;\n    float NdotV;\n    vec3 viewDir;\n    vec3 F0;\n    vec3 DiffuseColor;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Constant {\n    vec4 u_ashColor;\n    vec4 u_flameColor;\n    float u_centerX;\n    float u_centerY;\n    float u_radio;\n    float u_st;\n    float u_width;\n    float u_noiseSize;\n    float u_noiseSeed;\n};\nvoid main(void) {\n    vec4 c = texture(texture, v_uv0) * v_color;\n    ALPHA_TEST(c);\n    vec2 st = vec2(u_st, 1.0);\n    vec2 uv = v_uv0 * st;\n    float f = fbm(uv * u_noiseSize) * u_noiseSeed;\n    float w = u_radio + u_width;\n    float d = abs(distance(vec2(u_centerX, 1.0 - u_centerY) * st, uv) + f - 1.0);\n    float a = 1.0 - smoothstep(u_radio, w, d);\n    float am = (1.0 - a) * step(d, w);\n    vec4 ash = mix(u_flameColor, u_ashColor, am);\n    gl_FragColor = mix(c * a, ash, am) * c.a;\n    gl_FragColor.a = step(0.001, a) * c.a;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nfloat fbm_random (in vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    float a = fbm_random(i);\n    float b = fbm_random(i + vec2(1.0, 0.0));\n    float c = fbm_random(i + vec2(0.0, 1.0));\n    float d = fbm_random(i + vec2(1.0, 1.0));\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\nfloat fbm(in vec2 st) {\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    value += amplitude * noise(st);\n    st *= 2.0;\n    amplitude *= 0.5;\n    value += amplitude * noise(st);\n    st *= 2.0;\n    amplitude *= 0.5;\n    value += amplitude * noise(st);\n    st *= 2.0;\n    amplitude *= 0.5;\n    value += amplitude * noise(st);\n    st *= 2.0;\n    amplitude *= 0.5;\n    value += amplitude * noise(st);\n    st *= 2.0;\n    amplitude *= 0.5;\n    return value;\n}\nstruct SurfaceData\n{\n    vec3 PositionWS;\n    vec3 NormalWS;\n    float Smoothness;\n    float Metallic;\n    vec2 uv;\n};\nstruct PBRVariables\n{\n    float PerceptualRoughness;\n    float Roughness;\n    float Roughness2;\n    float Roughness2MinusOne;\n    float NormalizationTerm;\n    float NdotV;\n    vec3 viewDir;\n    vec3 F0;\n    vec3 DiffuseColor;\n};\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 u_ashColor;\nuniform vec4 u_flameColor;\nuniform float u_centerX;\nuniform float u_centerY;\nuniform float u_radio;\nuniform float u_st;\nuniform float u_width;\nuniform float u_noiseSize;\nuniform float u_noiseSeed;\nvoid main(void) {\n    vec4 c = texture2D(texture, v_uv0) * v_color;\n    ALPHA_TEST(c);\n    vec2 st = vec2(u_st, 1.0);\n    vec2 uv = v_uv0 * st;\n    float f = fbm(uv * u_noiseSize) * u_noiseSeed;\n    float w = u_radio + u_width;\n    float d = abs(distance(vec2(u_centerX, 1.0 - u_centerY) * st, uv) + f - 1.0);\n    float a = 1.0 - smoothstep(u_radio, w, d);\n    float am = (1.0 - a) * step(d, w);\n    vec4 ash = mix(u_flameColor, u_ashColor, am);\n    gl_FragColor = mix(c * a, ash, am) * c.a;\n    gl_FragColor.a = step(0.001, a) * c.a;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","binding":1,"members":[{"name":"u_ashColor","type":16,"count":1},{"name":"u_flameColor","type":16,"count":1},{"name":"u_centerX","type":13,"count":1},{"name":"u_centerY","type":13,"count":1},{"name":"u_radio","type":13,"count":1},{"name":"u_st","type":13,"count":1},{"name":"u_width","type":13,"count":1},{"name":"u_noiseSize","type":13,"count":1},{"name":"u_noiseSeed","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"burnning-one|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"u_centerX":{"type":13,"value":[-0.2],"inspector":{"tooltip":"中心点x"}},"u_centerY":{"type":13,"value":[1.2],"inspector":{"tooltip":"中心点y"}},"u_radio":{"type":13,"value":[0],"inspector":{"tooltip":"半径"}},"u_st":{"type":13,"value":[1],"inspector":{"tooltip":"宽高比"}},"u_width":{"type":13,"value":[0.1],"inspector":{"tooltip":"燃烧宽度"}},"u_noiseSize":{"type":13,"value":[15],"inspector":{"tooltip":"噪声大小"}},"u_noiseSeed":{"type":13,"value":[0.1],"inspector":{"tooltip":"噪声乘值"}},"u_ashColor":{"type":16,"value":[0,0,0,1],"inspector":{"tooltip":"灰烬的色值"}},"u_flameColor":{"type":16,"value":[1,0.3,0.04,1],"inspector":{"tooltip":"火焰的色值"}}}}]}]]],0,0,[],[],[]]